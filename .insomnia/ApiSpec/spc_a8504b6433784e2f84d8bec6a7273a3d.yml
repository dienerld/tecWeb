_id: spc_a8504b6433784e2f84d8bec6a7273a3d
type: ApiSpec
parentId: wrk_73b2d6f6c364491a8faa157b3d1fba62
modified: 1654107828361
created: 1654106373527
fileName: pigMan.yaml
contents: >-
  openapi: 3.0.0
  info:
    description: "Api para sistema de gerenciamento de granjas de suíno"
    version: 1.0.0
    title: Pig Manager
    termsOfService: http://swagger.io/terms/
    contact:
      email: diener.ld@outlook.com
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html
  tags:
    - name: stall
      description: Informações as baias
    - name: pig
      description: Informações sobre porcos
    - name: food
      description: Informações sobre gastos de rações
  servers:
    - url: https://localhost:8080/v1

  paths:
    # PIGS
    # /pigs
    /pigs:
      post:
        tags:
          - pig
        summary: Adiciona um novo porco
        description: ""
        operationId: addPig
        requestBody:
          $ref: "#/components/requestBodies/Pig"
        responses:
          "405":
            description: Invalid input

      get:
        tags:
          - pig
        summary: Lista todos os porcos
        description: ""
        operationId: listPig
        responses:
          "200":
            description: Lista de porcos
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Pet"
          "400":
            description: Id inválido
    # end /pigs

    # start /pigs/id
    "/pigs/{pigId}":
      get:
        tags:
          - pig
        summary: Find pet by ID
        description: Returns a single pet
        operationId: getPetById
        parameters:
          - name: petId
            in: path
            description: ID of pet to return
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Pet"
          "400":
            description: Invalid ID supplied
          "404":
            description: Pet not found
      put:
        tags:
          - pig
        summary: Atualiza dados de um porco existente
        description: ""
        operationId: updatePig
        requestBody:
          $ref: "#/components/requestBodies/Pig"
        responses:
          "400":
            description: Id inválido
          "404":
            description: Porco não encontrado

      delete:
        tags:
          - pig
        summary: Remove um porco existente
        description: ""
        operationId: deletePig
        parameters:
          - name: pigId
            in: path
            description: ID do porco a ser excluído
            required: true
            schema:
              type: integer
              format: Long
        responses:
          "400":
            description: Id inválido
          "404":
            description: Porco não encontrado

    # end /pigs/id
    # END PIGS
    /stalls:
      get:
        tags:
          - stall
        summary: Lista todas as baias
        description: ""
        operationId: listStall
        responses:
          "200":
            description: Operação bem sucedida
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      # JsonSchema:
                      id:
                        type: integer
                        format: Long
                      petId:
                        type: integer
                        format: int64
      #End Get

      post:
        tags:
          - stall
        summary: Adiciona uma nova baia
        description: ""
        operationId: addStall
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stall"
          description: Dados da baia a ser adicionada
          required: true
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Stall"
          "400":
            description: Dados de baia inválidos
      # End Post

    "/stalls/{stallId}":
      # Get/id
      get:
        tags:
          - stall
        summary: Buscar baia pelo Id
        description:
          For valid response try integer IDs with value >= 1 and <= 10. Other
          values will generated exceptions
        operationId: getStallById
        parameters:
          - name: stallId
            in: path
            description: ID da baia a ser Buscada
            required: true
            schema:
              type: integer
              format: Long
        responses:
          "200":
            description: Operação bem sucedida
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Stall"
          "400":
            description: Id inválido
          "404":
            description: Baia não encontrada
      # End Get/id
      # Delete/id
      delete:
        tags:
          - stall
        summary: Remove baia existente
        description: ""
        operationId: deleteStall
        parameters:
          - name: stallId
            in: path
            description: ID da baia a ser excluída
            required: true
            schema:
              type: integer
              format: Long
              minimum: 1
        responses:
          "400":
            description: Id inválido
          "404":
            description: Baia não encontrada
    # End Delete/id
    # End /stalls/id

    /user:
      post:
        tags:
          - user
        summary: Create user
        description: This can only be done by the logged in user.
        operationId: createUser
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Created user object
          required: true
        responses:
          default:
            description: successful operation
    /user/createWithArray:
      post:
        tags:
          - user
        summary: Creates list of users with given input array
        description: ""
        operationId: createUsersWithArrayInput
        requestBody:
          $ref: "#/components/requestBodies/UserArray"
        responses:
          default:
            description: successful operation
    /user/createWithList:
      post:
        tags:
          - user
        summary: Creates list of users with given input array
        description: ""
        operationId: createUsersWithListInput
        requestBody:
          $ref: "#/components/requestBodies/UserArray"
        responses:
          default:
            description: successful operation
    /user/login:
      get:
        tags:
          - user
        summary: Logs user into the system
        description: ""
        operationId: loginUser
        parameters:
          - name: username
            in: query
            description: The user name for login
            required: true
            schema:
              type: string
          - name: password
            in: query
            description: The password for login in clear text
            required: true
            schema:
              type: string
        responses:
          "200":
            description: successful operation
            headers:
              X-Rate-Limit:
                description: calls per hour allowed by the user
                schema:
                  type: integer
                  format: int32
              X-Expires-After:
                description: date in UTC when token expires
                schema:
                  type: string
                  format: date-time
            content:
              application/json:
                schema:
                  type: string
          "400":
            description: Invalid username/password supplied
    /user/logout:
      get:
        tags:
          - user
        summary: Logs out current logged in user session
        description: ""
        operationId: logoutUser
        responses:
          default:
            description: successful operation
    "/user/{username}":
      get:
        tags:
          - user
        summary: Get user by user name
        description: ""
        operationId: getUserByName
        parameters:
          - name: username
            in: path
            description: "The name that needs to be fetched. Use user1 for testing. "
            required: true
            schema:
              type: string
        responses:
          "200":
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          "400":
            description: Invalid username supplied
          "404":
            description: User not found
      put:
        tags:
          - user
        summary: Updated user
        description: This can only be done by the logged in user.
        operationId: updateUser
        parameters:
          - name: username
            in: path
            description: name that need to be updated
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Updated user object
          required: true
        responses:
          "400":
            description: Invalid user supplied
          "404":
            description: User not found
      delete:
        tags:
          - user
        summary: Delete user
        description: This can only be done by the logged in user.
        operationId: deleteUser
        parameters:
          - name: username
            in: path
            description: The name that needs to be deleted
            required: true
            schema:
              type: string
        responses:
          "400":
            description: Invalid username supplied
          "404":
            description: User not found
  externalDocs:
    description: Find out more about Swagger
    url: http://swagger.io

  components:
    requestBodies:
      UserArray:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
        description: List of user object
        required: true
      Pig:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"

        description: Pet object that needs to be added to the store
        required: true
    schemas:
      Stall:
        type: object
        properties:
          id:
            type: integer
            format: int64
          petId:
            type: integer
            format: int64
          quantity:
            type: integer
            format: int32
          shipDate:
            type: string
            format: date-time
          status:
            type: string
            description: Order Status
            enum:
              - placed
              - approved
              - delivered
          complete:
            type: boolean
            default: false
      User:
        type: object
        properties:
          id:
            type: integer
            format: int64
          username:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          password:
            type: string
          phone:
            type: string
          userStatus:
            type: integer
            format: int32
            description: User Status
      Category:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string

      Tag:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      Pet:
        type: object
        required:
          - name
          - photoUrls
        properties:
          id:
            type: integer
            format: int64
          category:
            $ref: "#/components/schemas/Category"
          name:
            type: string
            example: doggie
          photoUrls:
            type: array
            items:
              type: string
          tags:
            type: array
            items:
              $ref: "#/components/schemas/Tag"
          status:
            type: string
            description: pet status in the store
            enum:
              - available
              - pending
              - sold

      ApiResponse:
        type: object
        properties:
          code:
            type: integer
            format: int32
          type:
            type: string
          message:
            type: string

contentType: yaml
