# _id: spc_a8504b6433784e2f84d8bec6a7273a3d
# type: ApiSpec
# parentId: wrk_73b2d6f6c364491a8faa157b3d1fba62
# modified: 1654112544859
# created: 1654106373527
# fileName: pigMan.yaml
# contents: >-
openapi: 3.0.0

info:
  description: "Api para sistema de gerenciamento de granjas de suíno"
  version: 1.0.0
  title: Pig Manager
  termsOfService: http://swagger.io/terms/
  contact:
    email: diener.ld@outlook.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: stall
    description: Informações as baias
  - name: pig
    description: Informações sobre porcos
  - name: food
    description: Informações sobre gastos de rações
servers:
  - url: https://localhost:8080/v1

paths:
  # STALLS
  /stalls:
    # Get
    get:
      tags:
        - stall
      summary: Lista todas as baias
      description: ""
      operationId: listStall
      responses:
        "200":
          description: Operação bem sucedida
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    # JsonSchema:
                    id:
                      type: integer
                      format: Long
                    petId:
                      type: integer
                      format: int64
    #End Get

    # Post
    post:
      tags:
        - stall
      summary: Adiciona uma nova baia
      description: ""
      operationId: addStall
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stall"
        description: Dados da baia a ser adicionada
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stall"
        "400":
          description: Dados de baia inválidos
    # End Post

  "/stalls/{stallId}":
    # Get/id
    get:
      tags:
        - stall
      summary: Buscar baia pelo Id
      description:
        For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getStallById
      parameters:
        - name: stallId
          in: path
          description: ID da baia a ser Buscada
          required: true
          schema:
            type: integer
            format: Long
      responses:
        "200":
          description: Operação bem sucedida
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stall"
        "400":
          description: Id inválido
        "404":
          description: Baia não encontrada
    # End Get/id
    # Delete/id
    delete:
      tags:
        - stall
      summary: Remove baia existente
      description: ""
      operationId: deleteStall
      parameters:
        - name: stallId
          in: path
          description: ID da baia a ser excluída
          required: true
          schema:
            type: integer
            format: Long
            minimum: 1
      responses:
        "400":
          description: Id inválido
        "404":
          description: Baia não encontrada
    # End Delete/id

    # Put/id
    put:
      tags:
        - stall
      summary: Atualiza dados de um baia existente
      description: ""
      operationId: updatePig
      parameters:
        - name: pigId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/schemas/Stall"
      responses:
        "400":
          description: Id inválido
        "404":
          description: Porco não encontrado
    # End Put/id
  # End /stalls/id

  # PIGS
  # /pigs
  /pigs:
    post:
      tags:
        - pig
      summary: Adiciona um novo porco
      description: ""
      operationId: addPig
      requestBody:
        $ref: "#/components/requestBodies/Pig"
      responses:
        "405":
          description: Invalid input

    get:
      tags:
        - pig
      summary: Lista todos os porcos
      description: ""
      operationId: listPig
      responses:
        "200":
          description: Lista de porcos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Id inválido
  # end /pigs

  # start /pigs/id
  "/pigs/{pigId}":
    # Get/id
    get:
      tags:
        - pig
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPigById
      parameters:
        - name: pigId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pig"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
    # End Get/id

    # Put/id
    put:
      tags:
        - pig
      summary: Atualiza dados de um porco existente
      description: ""
      operationId: updatePig
      parameters:
        - name: pigId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/Pig"
      responses:
        "400":
          description: Id inválido
        "404":
          description: Porco não encontrado
    # End Put/id

    # Delete/id
    delete:
      tags:
        - pig
      summary: Remove um porco existente
      description: ""
      operationId: deletePig
      parameters:
        - name: pigId
          in: path
          description: ID do porco a ser excluído
          required: true
          schema:
            type: integer
            format: Long
      responses:
        "400":
          description: Id inválido
        "404":
          description: Porco não encontrado
    # Delete/id
  # end /pigs/id
  # END PIGS

  /foods:
    get:
      tags:
        - food
      summary: Lista todos os gastos de ração
      description: ""
      operationId: listFood
      responses:
        "200":
          description: Operação bem sucedida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Food"
    # Post
    post:
      tags:
        - food
      summary: Insere um novo gasto de ração
      description: ""
      operationId: createFood
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Food"
        description: Cria um novo gasto de ração
        required: true
      responses:
        default:
          description: Operação bem sucedida
    # End Post

  "/foods/{foodId}":
    # Put/id
    put:
      tags:
        - food
      summary: Atualiza dados de um porco existente
      description: ""
      operationId: updatePig
      parameters:
        - name: foodId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: Long
      requestBody:
        $ref: "#/components/requestBodies/Food"
      responses:
        "400":
          description: Id inválido
        "404":
          description: Porco não encontrado
    # End Put/id

components:
  requestBodies:
    Food:
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: "#/components/schemas/Food"
      description: List of user object
      required: true
    Pig:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pig"
    Stall:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Stall"

      description: Pet object that needs to be added to the store
      required: true
  schemas:
    Stall:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
    Pig:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
    Food:
      type: object
      properties:
        id:
          type: integer
          format: Long
        name:
          type: string

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: "#/components/schemas/Food"
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
# contentType: yaml
